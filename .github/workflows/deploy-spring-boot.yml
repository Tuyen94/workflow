name: Reusable Spring Boot Deploy Workflow

on:
  workflow_call:
    inputs:
      java_version:
        description: 'Java version to use'
        required: false
        type: string
        default: '21'
      spring_profile:
        description: 'Spring profile to activate'
        required: false
        type: string
        default: 'prod'
      app_port:
        description: 'Application port'
        required: false
        type: string
        default: '9794'
      additional_volumes:
        description: 'Additional volume mounts (space-separated, e.g., "-v /host/path1:/container/path1 -v /host/path2:/container/path2")'
        required: false
        type: string
        default: ''
      docker_network:
        description: 'Docker network name'
        required: false
        type: string
        default: ''
      base_path:
        description: 'Base path for actuator endpoints (optional, defaults to service name)'
        required: false
        type: string
        default: ''
    secrets:
      SERVER_USER:
        description: 'SSH username'
        required: true
      SERVER_IP:
        description: 'Server IP address'
        required: true
      SERVER_SSH_PASSWORD:
        description: 'SSH password'
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.repository.name }}
      APP_PORT: ${{ inputs.app_port }}
      SPRING_PROFILE: ${{ inputs.spring_profile }}
      ADDITIONAL_VOLUMES: ${{ inputs.additional_volumes }}
      DOCKER_NETWORK: ${{ inputs.docker_network }}
      BASE_PATH: ${{ inputs.base_path || github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_SSH_PASSWORD: ${{ secrets.SERVER_SSH_PASSWORD }}

    steps:
      - name: Set short SHA and downcase REPO
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "SHORT_SHA=${SHORT_SHA}" >> ${GITHUB_ENV}
          echo "DOCKER_IMAGE=ghcr.io/${REPO_LOWER}:${SHORT_SHA}" >> ${GITHUB_ENV}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java_version }}

      - name: Configure Maven settings.xml for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0">
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify Maven installation
        run: mvn --version

      - name: Build and run unit tests with Maven
        run: mvn package -U -B --settings ~/.m2/settings.xml

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: |
          docker push ${{ env.DOCKER_IMAGE }}

      - name: Deploy to Server
        run: |
          # Cài đặt sshpass để sử dụng mật khẩu SSH
          sudo apt-get install -y sshpass
          
          # Tạo file SSH known_hosts để không bị hỏi xác nhận host
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          
          # SSH vào server, pull Docker image từ GHCR và chạy container
          sshpass -p ${{ env.SERVER_SSH_PASSWORD }} ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            # Login to GHCR
            echo ${{ env.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Create network if not exists (only if network name is provided)
            if [ -n "${{ env.DOCKER_NETWORK }}" ]; then
              docker network create --driver bridge ${{ env.DOCKER_NETWORK }} || true
            fi

            # Pull latest image
            docker pull ${{ env.DOCKER_IMAGE }}

            # Stop and remove existing container
            docker stop ${{ env.SERVICE_NAME }} || true
            docker rm ${{ env.SERVICE_NAME }} || true

            # Run new container with health check
            NETWORK_PARAM=""
            if [ -n "${{ env.DOCKER_NETWORK }}" ]; then
              NETWORK_PARAM="--network ${{ env.DOCKER_NETWORK }}"
            fi

            docker run --restart always -d --name ${{ env.SERVICE_NAME }} \
              --add-host=host.docker.internal:host-gateway \
              -v /var/log:/var/log \
              ${{ env.ADDITIONAL_VOLUMES }} \
              ${NETWORK_PARAM} \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              -e SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILE }} \
              --health-cmd="curl -f http://localhost:${{ env.APP_PORT }}/${{ env.BASE_PATH }}/actuator/health || exit 1" \
              --health-interval=5s \
              --health-timeout=10s \
              --health-retries=12 \
              ${{ env.DOCKER_IMAGE }}

            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            timeout 60 sh -c 'until docker inspect --format="{{.State.Health.Status}}" ${{ env.SERVICE_NAME }} | grep -q "healthy"; do sleep 5; done' || echo "Health check timeout - container may still be starting"
          EOF
